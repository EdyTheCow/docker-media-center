{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"About","text":"<p>Note</p> <p>Just wanna get started and don't care about any of this yapping? Head straight to Installation section!</p> <p>This documentation consists of a few different ways to set-up and run fully automated media server.  All of pre-configured docker compose files have been fully tested, secured and are production ready.  Anything that needs to be manually configured is documented step by step.  Sources for all of services and other documentation are linked in the guides.</p> <p>Use these configurations and guides however you see fit, all credit goes to people who have developed all of these services making this possible.  Documentation and testing of all of this has taken me many hours.  If you found any of this useful, I would appreciate if you consider leaving a star  :)</p>"},{"location":"#why-use-this-over-x","title":"Why use this over X?","text":"<p>When I started looking at existing guides and provided docker compose files, I was surprised at the lack of reverse proxies and/or attempts of securing the services. Most of \"ready to use\" examples have open ports with no security in mind. Running services that way locally is probably fine, this guide is meant for anyone who wants to run them publicly in a secure way. </p> <p>None of services in any of configurations are exposed to internet directly. The few ones that are use Traefik as a reverse proxy to securely expose service's web UI with proper certificates. On top of that, services are put behind basic authentication enforced by Traefik. The rest of the services run and communicate locally on the server. Everything was pre-configured as much as possible for a quick and secure installation.</p>"},{"location":"#choosing-configuration","title":"Choosing configuration","text":"<p>Note</p> <p>Not familiar with services that are mentioned? Check out References  section.</p> <p>The recommended and fastest way of setting up automated media server is to use Riven with a debrid service. While Riven is still quite new and is under active development, it replaces majority of Arr services compared to a more traditional setup. Meaning there is way less things to install and maintain. Here's a quick overview:</p>"},{"location":"#riven","title":"Riven","text":"<p>Services: Jellyfin, Jellyseerr, Riven, Zurg, Rclone</p> <p>Riven replaces sonarr, radarr, prowlarr (optional), download client (torrent / debrid client). However there's a small subscription cost for a debrid service which provides the unlimited shared storage.</p>"},{"location":"#arr-stack","title":"Arr stack","text":"<p>Services: Jellyfin, Jellyseerr, Sonarr, Radarr, Prowlarr, qBittorrent, Gluetun</p> <p>The traditional setup using arr services can provide more granular control.  Debrid can be also used with arr stack leveraging the unlimited storage. However, installation and maintenance requires more effort.</p>"},{"location":"installation/","title":"Installation","text":"<p>WIP</p>"},{"location":"config/arr-stack/","title":"Arr Stack","text":""},{"location":"config/arr-stack/#services","title":"Services","text":"<ul> <li>Jellyfin</li> <li>Transmission</li> <li>Radarr</li> <li>Sonarr</li> <li>Prowlarr</li> <li>Jellyseerr</li> </ul>"},{"location":"config/arr-stack/#getting-started","title":"Getting Started","text":"<p>This guide assumes you have a basic knowledge of linux and Docker / Docker Compose.</p>"},{"location":"config/arr-stack/#requirements","title":"Requirements","text":"<ul> <li>Domain</li> <li>Docker</li> <li>Docker Compose (Docker Engine now comes with compose)</li> </ul>"},{"location":"config/arr-stack/#installation","title":"Installation","text":""},{"location":"config/arr-stack/#preparations","title":"Preparations","text":"<p>First we want configure enviroment variables and setup domain records before installing anything. </p> <p>Clone repository <pre><code>git clone https://github.com/EdyTheCow/docker-media-center.git\n</code></pre></p> <p>Enviroment variables Navigate to <code>dmc/compose/.env/</code> and edit these variables.</p> Variable Default Description COMPOSE_PROJECT_NAME dmc The prefix for all of containers when started from the compose file DOMAIN domain.com The domain that's going to be used to access Jellyfin and rest of the other services DATA_DIR ../data The location where all of media and downloads are going to be stored SERVICES_DIR ../data The location where all of services configs are stored TIMEZONE Europe/Oslo Your timezone, you can find all of the valid timezones here: https://en.wikipedia.org/wiki/List_of_tz_database_time_zones#List ENV_PUID 1000 Your user ID, used for file permissions. You can find it by running command: id ENV_PGUID 1000 Your group ID, used for file permissions. You can find it by running command: id SUB_DOMAIN_X - You can leave these as is unless you want to use different subdomains to access the services. If you change a subdomain, make sure the subdomains match when setting up domain DNS records. <p>Domain DNS records Setting up subdomains for every service, you are free to use whatever subdomain you want as long as it matches the subdomain specified in <code>dmc/compose/.env/</code> file. The example below shows the default values.</p> <p>If you're using Cloudflare, make sure to enable the proxying by enabling the cloud icon. For full end-to-end encryption, you can also enable \"Full\" under the SSL/TLS section in the Cloudflare panel.</p> Sub domain Record Target dmc.domain.com A Your server IP jellyfin.domain.com CNAME dmc.domain.com transmission.domain.com CNAME dmc.domain.com jellyseer.domain.com CNAME dmc.domain.com radarr.domain.com CNAME dmc.domain.com sonarr.domain.com CNAME dmc.domain.com prowlarr.domain.com CNAME dmc.domain.com"},{"location":"config/arr-stack/#traefik","title":"Traefik","text":"<p>Set correct acme.json permissions</p> <p>Navigate to <code>_base/data/traefik/</code> and run <pre><code>sudo chmod 600 acme.json\n</code></pre></p> <p>Basic auth Navigate to <code>_base/data/traefik/.htpasswd</code> and paste your generated user/pass in MD5 format. This will be your basic auth user/pass for most services we're going to set up. If unsure, google how to generate htpasswd.</p> <p>Start docker compose Inside of <code>_base/compose</code> run  <code>docker-compose up -d</code></p>"},{"location":"config/arr-stack/#jellyfin","title":"Jellyfin","text":"<p>Inside of <code>dmc/compose</code> run  <code>docker-compose up -d jellyfin</code> Configuration Navigate to <code>jellyfin.domain.com</code> in your browser and follow the instructions. When selecting library folder follow these paths:</p> Library Path Movies /data/media/movies TV Shows /data/media/tvshows <p>Jellyfin only has one volume pointing at <code>/data/media</code> this allows us to add whatever media type we want without having to define extra volumes in docker for future media types. </p>"},{"location":"config/arr-stack/#transmission","title":"Transmission","text":"<p>Inside of <code>dmc/compose</code> run  <code>docker-compose up -d transmission</code> Configuration Navigate to <code>transmission.domain.com</code> in your browser, you should be asked to login using the credentials for basic auth you set-up earlier. Under <code>Preferences -&gt; Torrents</code> make sure your download paths look like this: <code>/data/downloads/complete</code> and <code>/data/downloads/incomplete</code>. This will be important later on for hardlinks.</p>"},{"location":"config/arr-stack/#radarr","title":"Radarr","text":"<p>Inside of <code>dmc/compose</code> run</p> <p><code>docker-compose up -d radarr</code> Configuration Navigate to <code>radarr.domain.com</code> in your browser, in the panel under <code>Media Management</code> section and add the root folder by simply selecting <code>/data/media/movies</code> directory.</p> <p>Under <code>Download Clients</code> add a new client by selecting Transmission. Change these settings:</p> Setting Value Name Transmission Host transmission Category movies <p>Host <code>transmission</code> will resolve the local IP of the container, do not use a domain or public IP. It's more convenient and secure to connect services locally. Since the connection is local, you do not need to insert any other credentials. Click <code>Test</code> to make sure it works and add the client.</p>"},{"location":"config/arr-stack/#sonarr","title":"Sonarr","text":"<p>Inside of <code>dmc/compose</code> run  <code>docker-compose up -d sonarr</code></p> <p>Configuration Navigate to <code>sonarr.domain.com</code> in your browser, in the panel under <code>Media Management</code> section and add the root folder by simply selecting <code>/data/media/tvshows</code> directory.</p> <p>Under <code>Download Clients</code> add new client by selecting Transmission. Change these settings:</p> Setting Value Name Transmission Host transmission Category tvshows <p>Host <code>transmission</code> will resolve the local IP of the container, do not use a domain or public IP. It's more convenient and secure to connect services locally. Since the connection is local, you do not need to insert any other credentials. Click <code>Test</code> to make sure it works and add the client.</p>"},{"location":"config/arr-stack/#prowlarr","title":"Prowlarr","text":"<p>Inside of <code>dmc/compose</code> run  <code>docker-compose up -d prowlarr</code> Configuration Navigate to <code>prowlarr.domain.com</code> in your browser, under <code>Settings -&gt; Apps</code> add Sonarr and Radarr. </p> Setting Value Name Radarr Sync Level Full Sync Prowlarr Server http://prowlarr:9696 Radarr Server http://radarr:7878 <p>Instructions for adding Sonarr are exactly the same, just change the name to <code>Sonarr</code> and use <code>http://sonarr:8989</code> for <code>Sonarr Server</code>. You'll find API keys for both under <code>Settings -&gt; General</code> in their respective panels.</p> <p>Navigate to <code>Indexers</code> and click <code>Add Indexer</code> to add public or private indexers. Once added, these will automatically sync with Sonarr and Radarr. </p>"},{"location":"config/arr-stack/#jellyseerr","title":"Jellyseerr","text":"<p>Inside of <code>dmc/compose</code> run  <code>docker-compose up -d jellyseerr</code></p> <p>Configuration  Navigate to <code>jellyseerr.domain.com</code> in your browser, select option to use <code>Jellyfin account</code> and proceed by providing url and account details for your jellyfin installation. Scan and enable libraries.</p> <p>Adding radarr / sonarr Most importantly, do not use the actual url or IP of radarr / sonarr. Simply use <code>radarr</code> or <code>sonarr</code> for the hostname. This will resolve the local IP of the container rather than the public one. Since we're running everything on the same server, it's more secure and convenient to connect these services locally. Make sure to uncheck <code>Use SSL</code> option too for the local connection to work.</p> <p>Below are the important settings you should edit, the instructions for sonarr are exactly the same. Just make sure to replace <code>radarr</code> with <code>sonarr</code> and you should be good to go.</p> Setting Value Default Server Checked Server Name Radarr Hostname or IP Address radarr Use SSL Unchecked API Key Can be found under General section in radarr / sonarr panel"},{"location":"config/riven/","title":"Riven","text":"<p>Guide for setting fully automated media server using Riven, a replacement for Arr services. Setup is secured using Traefik reverse proxy by generating certificates and providing basic auth for any exposed web UIs.</p> <p>Services: Jellyfin, Jellyseerr, Riven, Zurg, Rclone</p>"},{"location":"config/riven/#requirements","title":"Requirements","text":"<ul> <li>Domain</li> <li>Docker / Docker Compose</li> <li>Real-debrid.com subscription (referral link )</li> </ul>"},{"location":"config/riven/#preparations","title":"Preparations","text":"<p>Configuration of environment variables, domain records and basic auth before moving to installation and starting services.</p>"},{"location":"config/riven/#clone-repository","title":"Clone repository","text":"<pre><code>git clone https://github.com/EdyTheCow/docker-media-center.git\n</code></pre>"},{"location":"config/riven/#riven-environment-variables","title":"Riven environment variables","text":"<p>Navigate to <code>dmc-riven/riven/compose/.env</code> and edit variables below.</p> <p>Required variables</p> Variable Default Description DOMAIN domain.com Domain used to access Jellyfin and other services DMC_RIVEN_DB_USER_PASS - Generate a password for Riven's database user DMC_RIVEN_REAL_DEBRID_API_KEY - Your real-debrid API key, can be found on their website <p>Optional variables, these variables can be left as is or changed to your liking.</p> Variable Default Description COMPOSE_PROJECT_NAME dmc-riven Prefix for all containers running in docker-compose file CONFIG_DIR ../data Directory for storing configs of all services TIMEZONE Etc/UTC Timezone used by services, valid options can be found here  PUID / PGID 1000 User and group ID, you can check yours with command: id SUB_DOMAIN_X - Subdomains for services, leave it or change it to your liking"},{"location":"config/riven/#debrid-environment-variables","title":"Debrid environment variables","text":"<p>Navigate to <code>dmc-riven/debrid/compose/.env</code>, this file includes mostly the same variables as above which are all optional.</p> <p>For service Zurg we'll have to manually set real-debrid API key direcly in <code>config.yml</code>. Navigate to <code>dmc-riven/debrid/data/zurg/config.yml</code> and paste your real-debrid API key in <code>token:</code> snippet of config.yml<pre><code>zurg: v1\ntoken: your-api-key-here\n</code></pre></p>"},{"location":"config/riven/#dns-records","title":"DNS records","text":"<p>You are free to use whatever subdomains you want as long as it matches the subdomain specified in <code>dmc-riven/riven/compose/.env</code> file. The example below shows the default values.</p> Sub domain Record Target dmc.domain.com A Your server's IP stream.domain.com CNAME dmc.domain.com add.domain.com CNAME dmc.domain.com riven.domain.com CNAME dmc.domain.com <p>By setting DNS records this way, you can later on change server's IP by changing only one value instead of modifying every subdomains target value.</p>"},{"location":"config/riven/#create-required-directories","title":"Create required directories","text":""},{"location":"config/riven/#traefik","title":"Traefik","text":""},{"location":"config/riven/#setting-correct-permissions-for-acmejson","title":"Setting correct permissions for <code>acme.json</code>","text":"<p>Navigate to <code>_base/data/traefik/</code> and run <pre><code>sudo chmod 600 acme.json\n</code></pre> This is where Traefik will store all of generated certificates for our services.</p>"},{"location":"config/riven/#basic-auth","title":"Basic auth","text":"<p>Navigate to <code>_base/data/traefik/.htpasswd</code> this is where we'll define basic auth user/pass for all services exposed to internet. You can generate user / pass pair by using command below. Replace <code>USER</code> and <code>PASSWORD</code> with your own. <pre><code>printf \"USER:$(openssl passwd -apr1 PASSWORD)\\n\"\n</code></pre> The command should output something like this <pre><code>myUser:$apr1$qJicUGAO$ci9xH5pr1M02VZAFo.4mo.\n</code></pre> Copy paste the output to <code>_base/data/traefik/.htpasswd</code> file. You can add multiple users by adding more values per new line.</p>"},{"location":"config/riven/#start-traefik","title":"Start Traefik","text":"<p>Navigate to <code>_base/compose</code> and run <pre><code>docker compose up -d\n</code></pre></p>"},{"location":"config/riven/#zurg-rclone","title":"Zurg / Rclone","text":"<p>First make sure you pasted the real-debrid API key in Zurg's config file at <code>dmc-riven/debrid/data/zurg/config.yml</code> By default real-debrid's drive will be mounted on your server at the path <code>/mnt/zurg</code>. It's recommended to leave it as is.</p>"},{"location":"config/riven/#start-zurg-and-rclone","title":"Start Zurg and Rclone","text":"<p>It's important that Zurg and Rclone are started before other services.  Zurg / Rclone mounts a drive from real-debrid which is used by Jellyfin and Riven, if mount isn't found the rest of services will fail to function.</p> <p>Navigate to <code>dmc-riven/debrid/compose</code> and run <pre><code>docker compose up -d\n</code></pre></p>"},{"location":"config/riven/#jellyfin","title":"Jellyfin","text":"<p>Navigate to <code>dmc-riven/riven/compose</code> and run</p> <pre><code>docker compose up -d jellyfin\n</code></pre>"},{"location":"config/riven/#configuration","title":"Configuration","text":"<p>Navigate to <code>https://stream.domain.com</code> in your browser and follow the installation instructions. When selecting library folder follow these paths:</p> Library name Content type Path Movies Movies /mnt/media_symlinks/movies Shows Shows /mnt/media_symlinks/shows Anime Movies Movies /mnt/media_symlinks/anime_movies Anime Shows Shows /mnt/media_symlinks/anime_shows <p>Library names can be whatever you want as long as paths are correct. <code>Anime Movies</code> and <code>Anime Shows</code> libraries are also optional.</p>"},{"location":"config/riven/#jellyseerr","title":"Jellyseerr","text":"<p>Navigate to <code>dmc-riven/debrid/compose</code> and run</p> <pre><code>docker compose up -d jellyseerr\n</code></pre>"},{"location":"config/riven/#configuration_1","title":"Configuration","text":"<p>Navigate to <code>https://add.domain.com</code> in your browser and follow the installation instructions.</p>"},{"location":"config/riven/#riven_1","title":"Riven","text":"<p>Navigate to <code>dmc-riven/debrid/compose</code> and run</p> <pre><code>docker compose up -d riven riven-db riven-frontend\n</code></pre> <p>Riven may take a couple of minutes to fully start. Navigate to <code>https://riven.domain.com</code> in your browser.  This time you will be prompted by basic auth by Traefik. Login with the credentials you chosen earlier in basic auth section.</p>"},{"location":"config/riven/#configuration_2","title":"Configuration","text":""},{"location":"references/","title":"Overview","text":"<p>WIP</p>"}]}